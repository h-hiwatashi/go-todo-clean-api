// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Todo defines model for Todo.
type Todo struct {
	Contents string `json:"contents"`
	Id       int    `json:"id"`
	NiceNum  int    `json:"nice_num"`
	Title    string `json:"title"`
	Username string `json:"username"`
}

// TodoNiceRequest defines model for TodoNiceRequest.
type TodoNiceRequest struct {
	Id int `json:"id"`
}

// TodoRequest defines model for TodoRequest.
type TodoRequest struct {
	Contents string `json:"contents"`
	Title    string `json:"title"`
	Username string `json:"username"`
}

// GetTodoListParams defines parameters for GetTodoList.
type GetTodoListParams struct {
	// Page The page number to retrieve
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// CreateTodoJSONRequestBody defines body for CreateTodo for application/json ContentType.
type CreateTodoJSONRequestBody = TodoRequest

// IncrementNiceJSONRequestBody defines body for IncrementNice for application/json ContentType.
type IncrementNiceJSONRequestBody = TodoNiceRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns hello message
	// (GET /hello)
	GetHello(w http.ResponseWriter, r *http.Request)
	// Create a new todo
	// (POST /todo)
	CreateTodo(w http.ResponseWriter, r *http.Request)
	// Get a list of todos
	// (GET /todo/list)
	GetTodoList(w http.ResponseWriter, r *http.Request, params GetTodoListParams)
	// Increment nice count for a todo
	// (POST /todo/nice)
	IncrementNice(w http.ResponseWriter, r *http.Request)
	// Delete a todo
	// (DELETE /todo/{id})
	DeleteTodo(w http.ResponseWriter, r *http.Request, id int)
	// Get a todo by ID
	// (GET /todo/{id})
	GetTodoById(w http.ResponseWriter, r *http.Request, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetHello operation middleware
func (siw *ServerInterfaceWrapper) GetHello(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHello(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTodo operation middleware
func (siw *ServerInterfaceWrapper) CreateTodo(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTodo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTodoList operation middleware
func (siw *ServerInterfaceWrapper) GetTodoList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTodoListParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTodoList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// IncrementNice operation middleware
func (siw *ServerInterfaceWrapper) IncrementNice(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IncrementNice(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTodo operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTodo(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTodoById operation middleware
func (siw *ServerInterfaceWrapper) GetTodoById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTodoById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/hello", wrapper.GetHello).Methods("GET")

	r.HandleFunc(options.BaseURL+"/todo", wrapper.CreateTodo).Methods("POST")

	r.HandleFunc(options.BaseURL+"/todo/list", wrapper.GetTodoList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/todo/nice", wrapper.IncrementNice).Methods("POST")

	r.HandleFunc(options.BaseURL+"/todo/{id}", wrapper.DeleteTodo).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/todo/{id}", wrapper.GetTodoById).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWTU/jSBD9K63aPXqx2eWAfINlxUYzYhBwQ2jU2JW4kd3dVJfDZCL/91F35wvHCUgw",
	"H9KcEtnteq9e1Xv2HArTWKNRs4N8Dq6osJHh739EhvwfS8YiscJwuTAl+l+eWYQclGacIEGXQIPOycnm",
	"Tcek9AS6LgHCx1YRlpDfrg4msdhdsjxv7h+wYF/rxpRmCFvzkmkPIgFVDtPSqsDPum2G77LiGgfrtQ5J",
	"y+YV/agSloWSNceNChskdjV7oQq8wscWHW/3PdzaNotdxXcW3ivoe0izT5Vttv5ppcdmSU0WgXOEguqv",
	"Sj1Jlq5SnkSJriBlWRkNOZxcjsTYkGiklhOlJ4JNaYRibNxqOHkQQ5xcjiCBKZKLjx4eZAeZr2gsamkV",
	"5PBPuJSAlVwFcdIK6zrwmmDg5FWUHntUQg7nyP+HA757Z412Ud+/s2xD5iAXfuHU1lLptd2GZNxq8Lot",
	"CnQuKOzappE0gxyukFvSTgR6YmksfyblpYWMG2D8L6FkDDaLE0PHp6ac9ehKa2tVhMfSB2d6pP8kHEMO",
	"f6TrEEkXCZJu7l33fC2YWuxeVOpt0EMSfvrQUy+KIKTQ+BQWZq1cWqso2655e5CP/ozfEpINMpKD/Hbe",
	"A72pUFg5QaHb5h5JsBGETAqn3hd+DeCxRZr5kIh7bmM2rnstcSzbmiE/TKBRWjU+zA6TgUAYAl/gmnF0",
	"g7BIYgGxC/1afd3FIHuBwt0b5xod+6oBr9AlkZy9auDnyEIKP1qvh5+z2xi5D+ndjhnpgrBBzT6qv6Np",
	"Nt8Ev5BxEjjKjt4NKX5cDEBdGBZj0+qyN7mV+sJPSRSm1RwCX/aNO1dlF3e2RsbtOZ6F64vk61k3GMKH",
	"/toP4eX+fATJdm7vM8BRZPO8S7GU8WcLG+VYyZjsDbzT2aj8Qar9Flsd8yh8qtzPxOgsPuuQpsMvkzOc",
	"Ym1s8EE85T+oqPZfR8w2T9PaFLKujOP8ODvOoLvrvgUAAP//n5NWiOMLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
